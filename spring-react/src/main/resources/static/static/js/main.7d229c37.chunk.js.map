{"version":3,"sources":["client.js","Container.js","Footer.js","forms/AddStudentForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","type","onClick","openModal","inputBottomMargin","marginBottom","tagStyle","color","AddStudentForm","initialValues","firsName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","setTimeout","fetch","headers","method","body","JSON","stringify","addNewStudent","onSuccess","catch","err","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","openNotification","message","description","notification","errorNotification","App","useState","studenst","setStudenst","isFetching","setFetching","isAddStudentModalVisible","setModalVisible","useEffect","fetchStudents","res","students","console","log","openModalStudent","closeModalStudent","comminElement","title","visible","onOk","onCancel","httpStatus","length","indicator","LoadingOutlined","fontSize","spin","columns","key","render","text","charAt","toUpperCase","dataIndex","dataSource","pagination","rowKey","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d229c37.chunk.js","sourcesContent":["import fetch from 'unfetch';\n\nconst checkStatus = response => {\n    if(response.ok) {\n        return response;\n    } else {\n        let error = new Error(response.statusText);\n        error.response = response;\n        response.json().then(e => {\n            error.error = e;\n        });\n        return Promise.reject(error);\n    }\n}\n\nexport const getAllStudents = () => \n    fetch('/api/students').then(checkStatus);\n\nexport const addNewStudent = student => \n    fetch('/api/students', {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(student)\n    })\n    .then(checkStatus);\n","import React from 'react';\n\nconst Container = props => (\n     <div style={{ width: '1400px', margin: '0 auto', textAlign: 'center' }}>\n        {props.children}\n    </div>\n);\n\nexport default Container;","import React from 'react';\nimport Container from './Container';\nimport { Button, Avatar } from 'antd';\n\nconst Footer = (props) => (\n    <div className='footer' >\n        <Container>\n            {props.numberOfStudents !== undefined ? \n                <Avatar style={{ backgroundColor: '#f56a00', marginRight: '5px' }} size='large'>{props.numberOfStudents}</Avatar> : null}\n            <Button type='primary' onClick={props.openModal}>Add new student +</Button>\n        </Container>\n    </div>\n);\n\nexport default Footer;","import React from 'react';\nimport { Formik } from 'formik';\nimport { Input, Button, Tag } from 'antd';\nimport { addNewStudent } from '../client';\n\nconst inputBottomMargin = {marginBottom: '10px'};\nconst tagStyle = {backgroundColor: '#f50', color: 'white', ...inputBottomMargin}\n\nconst AddStudentForm = (props) => (\n    <div>\n    <h1>Anywhere in your app!</h1>\n    <Formik\n      initialValues={{ firsName: '', lastName: '', email: '', gender: '' }}\n      validate={values => {\n        const errors = {};\n        \n        if(!values.firsName){\n            errors.firsName = 'First Name Required';\n        }\n\n        if(!values.lastName){\n            errors.lastName = 'Last Name Required';\n        }\n\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n\n        if(!values.gender){\n            errors.gender = 'Gender Required'\n        } else if(!['MALE', 'male', 'FEMALE', 'female'].includes(values.gender)) {\n            errors.gender = 'Gender must be (MALE, male, FEMALE, female)';\n        }\n      \n        return errors;\n      }}\n      onSubmit={(student, { setSubmitting }) => {\n        setTimeout(() => {\n          addNewStudent(student).then(() => {\n            props.onSuccess();\n            setSubmitting(false);\n          })\n          .catch(err => {\n            props.onFailure(err);\n          })\n          .finally(() => {\n            setSubmitting(false);\n          });\n        }, 400);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        submitForm,\n        isValid\n        /* and other goodies */\n      }) => (\n        <form onSubmit={handleSubmit}>\n\n          <Input\n            style={inputBottomMargin}\n            name=\"firsName\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.firsName}\n            placeholder='First Name. E.g John'\n          />\n          {errors.firsName && touched.firsName && <Tag style={tagStyle}>{errors.firsName}</Tag>}\n\n          <Input\n            style={inputBottomMargin}\n            name=\"lastName\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.lastName}\n            placeholder='Last Name. E.g John'\n          />\n          {errors.lastName && touched.lastName && <Tag style={tagStyle}>{errors.lastName}</Tag>}\n\n          <Input\n            style={inputBottomMargin}\n            name=\"email\"\n            type=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            placeholder='Email E.g example@gmail.com'\n          />\n          {errors.email && touched.email && <Tag style={tagStyle}>{errors.email}</Tag>}\n\n          <Input\n            name=\"gender\"\n            style={inputBottomMargin}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.gender}\n            placeholder='Gender. E.g John'\n          />\n          {errors.gender && touched.gender && <Tag style={tagStyle}>{errors.gender}</Tag>}\n\n          <Button \n            onClick={() => submitForm()} \n            type=\"submit\" \n            disabled={isSubmitting | (touched && !isValid)}>\n            Submit\n          </Button>\n        </form>\n      )}\n    </Formik>\n  </div>\n)\n\nexport default AddStudentForm;\n","import React from 'react';\nimport { notification } from 'antd';\n\nconst openNotification= (type, message, description) => {\n    notification[type]({\n        message,\n        description\n    });\n};\n\nexport const successNotification = (message, description) =>\n    openNotification('sucess', message, description);\n\nexport const infoNotification = (message, description) =>\n    openNotification('info', message, description);\n\nexport const warningNotification = (message, description) =>\n    openNotification('warning', message, description);\n\nexport const errorNotification = (message, description) =>\n    openNotification('error', message, description);","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { getAllStudents } from './client';\nimport Container from './Container';\nimport Footer from './Footer';\nimport AddStudentForm from './forms/AddStudentForm';\nimport {\n  Table,\n  Avatar,\n  Spin,\n  Modal,\n  Empty\n} from 'antd';\nimport { errorNotification } from './Notification';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst antIcon = () => <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nfunction App() {\n\n  const [studenst, setStudenst] = useState([]);\n  const [isFetching, setFetching] = useState(false);\n  const [isAddStudentModalVisible, setModalVisible] = useState(false);\n\n  useEffect(() => {\n    fetchStudents();\n  }, [])\n\n  const fetchStudents = () => {\n    setFetching(true);\n    getAllStudents()\n      .then(res => res.json())\n      .then(students => {\n        console.log(students);\n        setStudenst(students);\n        setFetching(false);\n      })\n      .catch(error => {\n          console.log(error);\n          const message = error.error.message;\n          const description = error.error.error;\n          errorNotification(message, description);\n          setFetching(false);\n      });\n  }\n\n// Modal\n const openModalStudent = () => setModalVisible(true);\n const closeModalStudent = () => setModalVisible(false);\n\n  const comminElement = () => (\n    <>\n      <Modal \n        title='Add new student'\n        visible={isAddStudentModalVisible}\n        onOk={closeModalStudent}\n        onCancel={closeModalStudent}\n        width={1000}\n        >\n      <AddStudentForm \n        onSuccess={() => { \n          closeModalStudent();\n          fetchStudents();\n        }}\n        onFailure={(error) => {\n          const message = error.error.message;\n          const description = error.error.httpStatus;\n          console.log(JSON.stringify(error));\n          errorNotification(message, description);\n        }}/>\n      </Modal>\n      <Footer numberOfStudents={studenst.length} openModal={openModalStudent} />\n      </>\n  );\n\n  if(isFetching) {\n    return (\n      <Container>\n        <Spin indicator={antIcon()} />\n      </Container>\n    )\n  }\n\n  if(studenst && studenst.length){\n\n    const columns = [\n      {\n        title: '',\n        key: 'avatar',\n        render: (text, student) => {\n          return (\n            <Avatar size=\"large\">\n            {`${student.firsName.charAt(0).toUpperCase()} ${student.lastName.charAt(0).toUpperCase()}`}\n          </Avatar>\n          )\n        }\n      },\n      {\n        title: 'Student Id',\n        dataIndex: 'studentId',\n        key: 'studentId'\n      },\n      {\n        title: 'FirsName',\n        dataIndex: 'firsName',\n        key: 'firsName',\n      },\n      {\n        title: 'LastName',\n        dataIndex: 'lastName',\n        key: 'lastName',\n      },\n      {\n        title: 'Email',\n        dataIndex: 'email',\n        key: 'email',\n      },\n       {\n        title: 'Gender',\n        dataIndex: 'gender',\n        key: 'gender',\n      }\n    ];\n\n    return (\n      <Container>\n        <Table \n          dataSource={studenst} \n          columns={columns}\n          pagination={false}\n          \n          rowKey=\"studentId\"\n        />\n       {comminElement()}\n      </Container>\n    )\n  }\n\n  return (\n    <Container>\n      <Empty description={\n        <h1>No Stidents found</h1>\n      }/>\n       {comminElement()}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}